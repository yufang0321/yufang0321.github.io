[{"categories":["前端技術"],"contents":"工作中遇到後端傳回參數可能有null及空字串的狀況，必須判斷是否為null或空字串，如果是再將預設的值塞入\n故認真的來了解一下false family及如何判斷是否有值及賦值\n這篇是把相關閱讀到的概念都整理成一篇\nfalsy Family let a = undefined;\rlet b = null;\rlet c = \u0026#39;\u0026#39;;\rconsole.log(!!a); //false\rconsole.log(!!b); //false\rconsole.log(!!c); //false JavaScript的強制轉型 const a = \u0026#34;123\u0026#34; const b = 100 const c = undefined const d = null const e = \u0026#39;\u0026#39; if(!!a){ //true console.log(a) } if(!!b){ //true console.log(b) } if(!!c){ //false console.log(c) } if(!!d){ //false console.log(d) } if(!!e){ //false console.log(e) } output:\u0026#34;123\u0026#34; 100 value !value !!value false true false true false true null true false undefined true false 0 true false -0 true false 1 false true -5 false true NaN true false '' true false \u0026lsquo;hello\u0026rsquo; false true 參考: https://stackoverflow.com/questions/29312123/how-does-the-double-exclamation-work-in-javascript#answer-29312197\n空值合併運算符 ?? const a = null ?? \u0026#39;default string\u0026#39;;\rconsole.log(a); //\u0026#34;default string\u0026#34;\rconst b = 0 ?? 50;\rconsole.log(b); //0 邏輯空賦值運算符 ??= const a = { duration: 50 };\ra.duration ??= 10;\rconsole.log(a.duration); //50\ra.speed ??= 25;\rconsole.log(a.speed); //25 三元運算子 function getFee(isVIP) { return isVIP ? \u0026#39;FREE\u0026#39; : \u0026#39;$10.00\u0026#39;; } console.log(getFee(true)); //\u0026#39;FREE\u0026#39; console.log(getFee(false)); //\u0026#34;$10.00\u0026#34; console.log(getFee(null)); //\u0026#34;$10.00\u0026#34; ","permalink":"https://yufang0321.github.io/blog/jspractice-6/","tags":["JavaScript","Frontend"],"title":"邏輯空賦值"},{"categories":["前端技術"],"contents":"TypeScript 私有類別屬性練習\n兩個參數 A、B，A如果為\u0026quot;1\u0026quot;則B=true，A=\u0026ldquo;0\u0026quot;則B=false 其他則為null A可以任意輸入，但是B只能有限輸出\nimport { Injectable } from \u0026#39;@angular/core\u0026#39;; @Injectable({ providedIn: \u0026#39;root\u0026#39;, }) export class test { public a: string; private b: boolean; constructor(x: string) { this.a = x; } getB() { console.log(\u0026#39;b:\u0026#39;, this.b); } changeBByA() { console.log(\u0026#39;a:\u0026#39;, this.a); if (this.a === \u0026#39;1\u0026#39;) { this.b = true; } else if (this.a === \u0026#39;0\u0026#39;) { this.b = false; } } } import { Component, inject, ViewEncapsulation } from \u0026#39;@angular/core\u0026#39;; import { test } from \u0026#39;./test/test\u0026#39;; @Component({ selector: \u0026#39;first-test\u0026#39;, standalone: true, templateUrl: \u0026#39;./first-test.html\u0026#39;, encapsulation: ViewEncapsulation.None, }) export class firstTest { constructor() {} ngOnInit() { let test1 = new test(\u0026#39;0\u0026#39;); test1.changeBByA(); test1.getB(); //b: false let test2 = new test(\u0026#39;1\u0026#39;); test2.changeBByA(); test2.getB(); //b: true let test3 = new test(\u0026#39;3\u0026#39;); test3.changeBByA(); test3.getB(); //b: undefined } } ","permalink":"https://yufang0321.github.io/blog/jspractice-5/","tags":["JavaScript","Frontend","TypeScript"],"title":"TypeScript 私有類別屬性練習"},{"categories":["前端技術"],"contents":"前端框架Angular的學習筆記\n安裝相關套件： Node.JS\n不確定有沒有裝過可以先在命令提示字元使用 node -v 確認\nTypeScript\nwindows系統的話在命令提示字元使用 npm install -g typescript\nmac用戶使用 sudo npm install -g typescript\nTypings\nwindows系統的話在命令提示字元使用 npm install -g typings\nmac用戶使用 sudo npm install -g typings\nAngular CLI\n在命令提示字元使用 npm install -g @angular/cli 進行安裝\n創建專案： cd到要創建的資料夾中，輸入 ng new [名稱]\n但第一次我使用這個方式創建時，我的專案少了app.module.ts這個檔案\n如果發生這個情形可改使用 ng new [名稱] --no-standalone --routing --ssr=false 就會正常了\n啟動專案：ng serve --open ","permalink":"https://yufang0321.github.io/blog/jspractice-4/","tags":["JavaScript","Frontend","Angular"],"title":"使用Angular框架創建一個專案"},{"categories":["露營"],"contents":"我們的第一次跨年露營！ 這次的目的地是：新竹尖石田埔露營地\n和好友一共四個人，另外再租了天幕和冰桶\n因為人數比較多，所以另外租了大冰桶和天幕，在松果戶外新竹店租裝備，可先在網路預訂要租的設備和時間\n領完裝備就出發前往露營地，老實說路真的很不好開，在後面一段Google map路程是10幾分鐘，但我們開了至少半小時\u0026hellip;都是一段有水泥一段是石頭泥巴路，一路上還遇到兩次會車，還好都是當地人的車，一路後退讓我們通過 中間有一度還開錯路，趕緊掉頭\n錯過叉路的位置：24°38'23.5\u0026quot;N 121°16'30.1\u0026quot;E 抵達！本來以為會很冷，結果天氣超好，太陽很大，大家開始脫外套 準備搭帳棚~\n這次帳篷是朋友帶的，據說他從小就跟爸媽睡這個帳篷，保養得超好！ 第二天的白天，到附近走走，天氣真的好好！\n晚上朋友帶了投影機，邊看跨年邊烤火\n看得我都想買台投影機了哈~ 隔天一早，一吃完早餐就準備收帳回家！\n收完大概中午12點，結果內灣老街附近大塞車，我們走另一條路，開到新竹市區都下午四點了\u0026hellip; 中途在宇老休息，吃點小東西\n馬告香腸，真的是濃濃的馬告味！ 宇老的香蕉米糕，香蕉搗碎宇米糕一起蒸煮，吃起來甜甜的又有米糕的香氣 宇老觀景台 回到桃園已經快晚上七點(中間去還裝備，還有吃一點小點心)，連假的車流量真的不容小覷！\n","permalink":"https://yufang0321.github.io/blog/camping-2/","tags":["Camping"],"title":"第二露-新竹田埔露營區"},{"categories":["前端技術"],"contents":"javascript書籍閱讀筆記，把不熟悉的觀念用自己的方式記錄與整理一遍！\n先看看這一段程式碼，想想會印出甚麼~\nvar fn1 = function() { console.log(\u0026#34;我是函式表達式\u0026#34;); } function fn1() { console.log(\u0026#34;我是函式陳述式\u0026#34;); } fn1(); 答案是：\u0026ldquo;我是函式表達式\u0026rdquo;\n第一次看這段程式碼時，百思不得其解，主要有幾個重要觀念：\n函式陳述式與函式表達式： 函式陳述式(Function Statement)：直接宣告一個函式，並且賦與名稱。 函式表達式(Function Expression)：宣告一個變數，使用運算子將函式附與到變數上。 函式陳述式優先：瀏覽器在在執行程式時，會經過兩階段，第一是創造階段、第二是執行階段 創造階段時，會先準備一個記憶體空間 執行階段時，則是真的把值賦與至變數上 而函式陳述式在創造階段就會提升，優於一般變數，故在創造階段後即可呼叫函式 因此上述程式碼真正的流程是\n//創造階段： function fn1() { console.log(\u0026#34;我是函式陳述式\u0026#34;); } var fn1; //執行階段 fn1 = function() { console.log(\u0026#34;我是函式表達式\u0026#34;); } fn1(); 在創造階段時，因為函式陳述式優先，故會先在創造階段時就定義好fn1函式，但此時尚未賦與值，在進入執行階段時，才會再把函式表達式內容賦與進去，故得到\u0026quot;我是函式表達式\u0026quot;的結果。\n閱讀書籍:看完這本就會懂！帶你無痛提升JavaScript面試力：精選55道前端工程師的核心問題 × 求職加分模擬試題解析\n","permalink":"https://yufang0321.github.io/blog/jspractice-3/","tags":["JavaScript","Frontend"],"title":"函式陳述式與函式表達式"},{"categories":["前端技術"],"contents":"在工作中踩過的雷，紀錄一下\n淺拷貝shallow copy 方法一 const objA = { a: 1, b: 2 } const objB = objA objB.a = 3 console.log(\u0026#39;objA.a:\u0026#39;, objA.a) // 3 方法二：使用ES6的Rest Operator複製 const objA = { a: 1, b: { c: 2 } } const objB = { ...objA } objB.a = 3 objB.b.c = 4 console.log(objA) //{a:1, b:{c: 4}}, 第一層有成功複製 console.log(objB) //{a:3, b:{c: 4}}, 第二層以後仍指向原來的objA的位置 方法三：Object.assign(target, source) const objA = { a: 1, b: { c: 2 } } const objB = Object.assign({}, objA) objA.a = 3 objA.b.c = 4 console.log(objB) // 1, 第一層有成功複製 console.log(objB.b.c) // 4, 第二層以後仍指向原來的objA的位置 深拷貝deep copy 方法一：JSON.parse(JSON.stringify()) const objA = { a: 1, b: { c: 3 } } const objB = JSON.parse(JSON.stringify(objA)) console.log(objA === objB) // false console.log(objA.b === objB.b) // false 另外參考： https://www.programfarmer.com/articles/2021/javascript-shallow-copy-deep-copy 有說到JSON.stringfy/parse處理後，有些值會產生變化，例如：\nundefined：會連同key一起消失 NaN：會被轉成 null。 Infinity：會被轉成 null。 regExp：會被轉乘 空 {}。 Date：型別會由 Data 轉成 string。 ","permalink":"https://yufang0321.github.io/blog/jspractice-2/","tags":["JavaScript","Frontend"],"title":"淺拷貝(shallow copy)與深拷貝(deep copy)"},{"categories":["前端技術"],"contents":"Map() 說文解字：重新整理一陣列內容，並回傳一新的陣列 基本語法：Array.map(function(currentValue, index, arr), thisValue)\ncurrentValue:當前正在處理的元素 index:正在處理的元素在array中的索引 array:正在處理的array本身 不會改變原陣列，回傳一新的陣列\n陣列長度不變\n若沒有回傳值，則為undefined\nconst arr = [ { name: \u0026#39;Frank\u0026#39;, age: 28, tel: \u0026#39;0912345678\u0026#39; }, { name: \u0026#39;Peter\u0026#39;, age: 30, tel: \u0026#39;0987654321\u0026#39; } ]; const newArr = arr.map((e) =\u0026gt; e.name); console.log(\u0026#39;newArr:\u0026#39;, newArr); //[\u0026#39;Frank\u0026#39;, \u0026#39;Peter\u0026#39;] Filter() 說文解字：過濾出符合條件的內容 基本語法：array.filter(function(currentValue, index, arr), thisValue)\ncurrentValue:當前正在處理的元素 index:正在處理的元素在array中的索引 array:正在處理的array本身 為淺拷貝，不會改變原陣列\nconst arr = [ { name: \u0026#39;Frank\u0026#39;, age: 28, tel: \u0026#39;0912345678\u0026#39; }, { name: \u0026#39;Peter\u0026#39;, age: 30, tel: \u0026#39;0987654321\u0026#39; } ]; const newArr = arr.filter((e) =\u0026gt; { return e.age \u0026gt;= 30 }) console.log(\u0026#39;newArr:\u0026#39;, newArr) //[{name: \u0026#39;Peter\u0026#39;, age: 30, tel: \u0026#39;0987654321\u0026#39;}] Reduce() 說文解字：return的是一個值或物件等(可以是任何型態)，而非陣列，是將當前元素和前一步累加的結果相加 基本語法：Aarray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\ntotal:上一次累加的结果。但如果指定了初始值則為指定的值，否則為第一個元素的值。 currentValue:當前元素的值。第一次foreach時，如果指定了初始值則為array[0]，否則為array[1]。 currentIndex:索引位置。第一次foreach時，如果有指定初始值則為0，否則為1。 array:array陣列本身。 const arr = [1, 2, 3, 4, 5, 6]; const newArr = arr.reduce((total, currentValue) =\u0026gt; { return total + currentValue }, 5) console.log(\u0026#39;newArr:\u0026#39;, newArr) // 26 reduce的用法還有好幾種，可以參考：https://w3c.hexschool.com/blog/a2cb755f\n","permalink":"https://yufang0321.github.io/blog/jspractice-1/","tags":["JavaScript","Frontend"],"title":"Map, Filter \u0026 Reduce 用法區別"},{"categories":["露營"],"contents":"第一次露營-桃園達拉蓋 臨時起意前往桃園復興區的達拉蓋露營區 可能因為是平日，當天只有我們我們一組客人\n此次是 無裝備露營 只帶了兩餐的食物和鍋具和餐具就出發!\n↑ 冷氣團準備進入台灣，天氣陰陰的，但風景還是不錯~\n↑ 愜意地喝著熱茶~\n↑ 當天住的帳篷，是營主今年9月(2023)升級的狩獵帳\n↑ 回程時附近風景\n","permalink":"https://yufang0321.github.io/blog/camping-1/","tags":["Camping"],"title":"第一次露營"},{"categories":["前端技術"],"contents":"使用Vue框架架設簡易店商網站 連結： 前端框架練習網站\n","permalink":"https://yufang0321.github.io/blog/vue_practice/","tags":["Vue.js","Frontend"],"title":"前端框架練習"},{"categories":["貓星人"],"contents":"梅干 這是我家貓貓全名 張梅干\n出生：2020年8月17日 品種：米克斯 興趣：打人、睡覺、跳上跳下、吃零食 朋友：窗外的小鳥 ","permalink":"https://yufang0321.github.io/blog/mycat/","tags":["Pets"],"title":"我家貓貓梅干"},{"categories":["後端技術"],"contents":"spring boot @cacheable 實作 環境配置 pom檔加入spring-boot-starter-cache、com.github.ben-manes.caffeine模組 application.yml 配置\nexpireAfterAccess=120s 表示緩存保持2分鐘\n在主配置開啟緩存@EnableCaching ","permalink":"https://yufang0321.github.io/blog/springboot-1/","tags":["Spring Boot","Backend"],"title":"SpringBoot @cacheable 實作筆記"},{"categories":["Test"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList List item List item List item List item List item Unordered List List item List item List item List item List item Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote This is a blockquote example.\nInline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\nTables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\nMarkdown Less Pretty Still renders nicely 1 2 3 Image Youtube video ","permalink":"https://yufang0321.github.io/blog/post-13/","tags":["Test"],"title":"Test"}]